import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier, GradientBoostingRegressor
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
import joblib

# Generate synthetic dataset for better learning
np.random.seed(42)
data_size = 200  # Increase dataset size

# Creating a more realistic dataset
data = pd.DataFrame({
    'age': np.random.randint(30, 85, data_size),
    'stage': np.random.randint(1, 5, data_size),
    'symptom_score': np.random.randint(1, 10, data_size),
    'days_elapsed': np.random.randint(1, 365, data_size),
    'treatment_received': np.random.randint(0, 2, data_size),  # 0 = No, 1 = Yes
    'comorbidity_score': np.random.randint(0, 5, data_size),  # 0 = none, higher = more issues
})

# Create synthetic labels
data['severity'] = (data['symptom_score'] > 5).astype(int)  # Binary label for severity
data['future_symptom_score'] = data['symptom_score'] + np.random.randint(-2, 3, data_size)  # Slight symptom progression

# --------------------------- SEVERITY PREDICTION ---------------------------
X_severity = data[['symptom_score', 'age', 'stage', 'treatment_received', 'comorbidity_score']]
y_severity = data['severity']

X_train, X_test, y_train, y_test = train_test_split(X_severity, y_severity, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

severity_model = LogisticRegression()
severity_model.fit(X_train_scaled, y_train)
joblib.dump(severity_model, 'severity_model.pkl')

# --------------------------- SYMPTOM PROGRESSION PREDICTION ---------------------------
X_symptoms = data[['stage', 'days_elapsed', 'treatment_received', 'comorbidity_score']]
y_symptoms = data['future_symptom_score']

X_train_sym, X_test_sym, y_train_sym, y_test_sym = train_test_split(X_symptoms, y_symptoms, test_size=0.2, random_state=42)

symptom_model = GradientBoostingRegressor(n_estimators=100, learning_rate=0.1)
symptom_model.fit(X_train_sym, y_train_sym)
joblib.dump(symptom_model, 'symptom_model.pkl')

print("Models trained and saved successfully!")